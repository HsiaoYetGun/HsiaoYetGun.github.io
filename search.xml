<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>A review on embedding</title>
      <link href="/2018/07/09/A-review-on-embedding/"/>
      <url>/2018/07/09/A-review-on-embedding/</url>
      <content type="html"><![CDATA[<p>这是我第一次写回顾总结性质的文章，真正坐下来开写的时候，才意识到想把一件事物按其历史发展总结展望一下的难度还是蛮大的。</p><a id="more"></a><p>因为明天得做一个组会的 presentation，就想着把我所了解的 embedding 方法给做一个整体性的介绍，希望能够对后续继续入生物序列词嵌入坑的师弟师妹们有所帮助。</p><p>文章结构就分成 5 大块，分别为单词级别、句子 / 文档级别、子词级别、字符级别的 embedding 方法，以及最后的总结和展望。</p><h1 id="Word-level-Embedding"><a href="#Word-level-Embedding" class="headerlink" title="Word-level Embedding"></a>Word-level Embedding</h1><p>单词级别的 embedding 方法之前就有几篇文章写过了，<a href="https://hsiaoyetgun.github.io/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-2-Word-Vector-Representations-word2vec/">CS224n Lecture 2</a>，<a href="https://hsiaoyetgun.github.io/2018/05/07/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-3-Advanced-Word-Vector-Representations/">CS224n Lecture 3</a>，<a href="https://hsiaoyetgun.github.io/2018/05/09/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight3%20Bag%20of%20Tricks%20for%20Efficient%20Text%20Classification/">CS224n Research Highlight 3</a>。</p><p>在此再简单提一下单词级别的 embedding 方法的发展。</p><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><ol><li>基于分类：最初 NLP 领域是靠一个大词典 (例如WordNet) ，所使用的是上位词和同义词集的信息将单词归到不同的类别中去，以此来表示单词的意思。但是这种方法忽视了单词的语境，并且很难维护。</li><li>离散编码：NLP 领域还用 One-hot 编码方式来表示词的意思，但是这种方法的缺点也是显而易见的，即无法度量单词之间的相似度、数据稀疏、维度灾难。</li></ol><h2 id="稠密词向量"><a href="#稠密词向量" class="headerlink" title="稠密词向量"></a>稠密词向量</h2><p>然后 NLP 专家们想出了用稠密的向量来表示一个词的意思，这里需要特别提一下的是一句话 </p><blockquote><p>You shall know a word by the company it keeps. </p></blockquote><p>换句话说就是一个词的意思可以由其上下文来表示，这种观点是后续词嵌入模型的根基。</p><p>最初模型走的路子大概可以分为两条：直接使用局部上下文信息的方法、基于共现矩阵的方法。</p><p>前者的代表为 Word2Vec 算法，后者的代表为 GloVe 算法，具体的内容可以参照以上三篇。</p><h2 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h2><p>今年在 NAACL18 上 <a href="http://allennlp.org/elmo" target="_blank" rel="noopener">ELMo</a> 横空出世了，ELMo 词向量的使用把各种 NLP 任务的 state-of-the-art 刷新了一下。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>ELMo 的优势如下：</p><ol><li>能够学习到词汇用法的复杂性，比如语法、语义。</li><li>能够学习不同上下文情况下的词汇多义性。</li></ol><p>与上述的几种方法不同的是，ELMo 所学得的词向量是动态的，在不同的上下文环境中将会得到不同的词向量表达。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>ELMo 的思路也是利用单词的上下文信息来表示中心词，与 Word2Vec 等方法简单的线性模型不同的是，ELMo 所用的为 biLSTM 模型，公式如下：</p><p><img src="/picture/embedding/1531068694891.jpg" alt="1531068694891"></p><p><img src="/picture/embedding/1531068715630.jpg" alt="1531068715630"></p><p>进而最大化其似然函数可得目标函数为：<img src="/picture/embedding/1531068727395.jpg" alt="1531068727395"></p><h3 id="模型细节"><a href="#模型细节" class="headerlink" title="模型细节"></a>模型细节</h3><p>ELMo 是双向语言模型 biLM 的多层表示的组合，对于某一个词语 $t_k$，一个 L 层的双向语言模型 biLM 能够由 2L+1 个向量表示。</p><p><img src="/picture/embedding/1531068763958.jpg" alt="1531068763958"></p><p>ELMo 将多层的 biLM 的输出 $R$ 整合成一个向量，$ELMo_k = E(R_k; \theta_e)$。不同层的隐藏状态保留了不同层次的单词信息，一种比较简单的方法是直接拿最顶层的隐藏状态作为词向量，而最好的方法则是将 biLM 层所有层的输出加上一个正则化的 softmax 得到的权重向量。</p><p><img src="/picture/embedding/1531068782855.jpg" alt="1531068782855"></p><p>其中 $\gamma$ 是缩放因子，作用类似于 LN。</p><p>论文里头没有给出模型图，因为时间关系，我就随便上网扒了一张 ELMo 的模型图，不过我发现这图是有错误的，姑且放上来凑个数。论文中对模型的描述为</p><blockquote><p>The ﬁnal model uses L = 2 biLSTM layers with 4096 units and 512 dimension projections and a residual connection from the ﬁrst to second layer.</p></blockquote><p>这里需要说明的是，ELMo 的输入为 char-n-gram embedding，来自 CNN + highway network。</p><blockquote><p>The context insensitive type representation uses 2048 character n-gram convolutional ﬁlters followed by two highway layers and a linear projection down to a 512 representation.</p></blockquote><p>作者发现 ELMo 模型如果能够进行适当的 dropout 或者加入 L2 范式的话，可以使得其最终权重保持在各层 biLM 层的权重均值附近。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>ELMo 的使用方法也是比较有意思的，有以下两种：</p><ol><li>直接将 ELMo 词向量与普通词向量拼接。</li><li>直接将 ELMo 词向量与隐藏变量拼接。</li></ol><p>补充一下：讲完组会后当天下午看到机器之心推送 <a href="https://www.jiqizhixin.com/articles/2018-07-09-9" target="_blank" rel="noopener">NLP领域的ImageNet时代到来：词嵌入「已死」，语言模型当立</a>。标题一看就想搞个大新闻，虽然是一股浓浓的传销性质的标题党文章，但不得不承认 ELMo 这类模型思想和用法确实算是开辟了词嵌入的另一条路，NLP 的迁移学习时代可能真的不远了。</p><h1 id="Sentence-Document-level-Embedding"><a href="#Sentence-Document-level-Embedding" class="headerlink" title="Sentence / Document-level Embedding"></a>Sentence / Document-level Embedding</h1><p>在句子和文档层面上，由于句子和文档与单词不同，出现的次数很少，并没有像单词一样预训练出词向量以供使用的必要，而是在特定的 NLP 任务中动态生成。</p><p>句子和文档层面的 embedding 方法主要分为两类：无监督方法和有监督方法。</p><h2 id="无监督方法"><a href="#无监督方法" class="headerlink" title="无监督方法"></a>无监督方法</h2><p>我在之前的 <a href="https://hsiaoyetgun.github.io/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight1%20A%20simple%20but%20tough-to-beat%20baseline%20for%20sentence%20embedding/">CS224n Research Highligh 1</a> 介绍了一种简单有效的无监督方法，这里再介绍一下另一篇文章 <a href="https://arxiv.org/abs/1405.4053" target="_blank" rel="noopener">Distributed Representations of Sentences and Documents</a>。</p><p>这篇文章还是 Mikolov 老爷子的作品，所以模型框架跟 Word2Vec 以及 fastText 很相似，所以同样就大概讲一下模型思想。这篇文章分别介绍了句向量和段落向量的表征方式：</p><h3 id="句向量"><a href="#句向量" class="headerlink" title="句向量"></a>句向量</h3><p>对于句向量的训练，本文的做法只是在 Word2Vec 的基础上做延伸工作。本文将得到单词的词向量做简单的求均值或者拼接获得句向量，并且直接根据实际任务来做个分类，在训练任务分类器的过程中同样取得了句向量的表示。这种思想已经有点 fastText 的雏形了，模型的架构图如下：</p><p><img src="/picture/embedding/c6dac075c8ed2bb00718673967777bb1_hd.jpg" alt="c6dac075c8ed2bb00718673967777bb1_hd"></p><h3 id="段落向量"><a href="#段落向量" class="headerlink" title="段落向量"></a>段落向量</h3><p>关于段落向量的训练，本文提出了两种方法，这里主要介绍一下第一种，即 PV-DM。PV-DM 也是一样的套路，唯一的区别是输入端加入了一个表示段落 id 的 token。该算法主要分为两个阶段：</p><ol><li>在训练阶段，我们先学得了模型的参数。</li><li>而在预测阶段，随机初始化一个新的段落向量，即目标段落向量。然后将步骤 1 中学得的模型参数给固定住，以同样的方式来训练得出新的段落向量。</li></ol><p>作者的观点是借由这个段落向量，我们可以更好地保留住普通词向量所不能包含的特定语境下面的上下文信息，相当于我们多保留了一个该语境下的额外信息。PV-DM 的模型架构图如下所示：</p><p><img src="/picture/embedding/ef7668051ab7f574ab1e41a0f8d3f0eb_hd.jpg" alt="ef7668051ab7f574ab1e41a0f8d3f0eb_hd"></p><p>至于 PV-DBOW 架构，跟 Word2Vec 里头的 Skip-gram 模型很相近，思想是拿段落 id 来对相应的上下文信息进行拟合，最终同样可以得到段落向量。但个人认为这种方法很不靠谱，纯粹地拿段落的 id 当作输入来拟合上下文的单词，损失掉了包括词序在内的很多信息。PV-DBOW 的模型架构图如下所示：</p><p><img src="/picture/embedding/a9781307fe0c25097e3674bc72d6d372_hd.jpg" alt="a9781307fe0c25097e3674bc72d6d372_hd"></p><p>因时间关系来不及看另外两篇比较出名的文章，这里留一个坑 <a href="https://arxiv.org/abs/1506.06726" target="_blank" rel="noopener">Skip-thought vectors</a>，<a href="https://openreview.net/forum?id=rJvJXZb0W" target="_blank" rel="noopener">Quick-thoughts vectors</a>，日后了解了这两种模型思想后再来填土。</p><h2 id="有监督方法"><a href="#有监督方法" class="headerlink" title="有监督方法"></a>有监督方法</h2><p>以往的有监督方法只是通过简单的 RNN、CNN 架构来实现，效果往往比无监督方式差，但是最近提出的 <a href="https://arxiv.org/abs/1705.02364" target="_blank" rel="noopener">InferSent</a> 则取得了非常好的效果，这篇文章是用来做自然语言推导 (NLI) 的，因为之后打算写一篇 NLI 方向的文章，所以这个模型打算放到那边再细讲。(后续补充：<a href="hsiaoyetgun.github.io/">InferSent 的模型介绍</a> )</p><p>InferSent 的模型结构很简单，如下图所示。其编码器由 BiLSTM + max pooling 构成。</p><p><img src="/picture/embedding/1531071540664.jpg" alt="1531071540664"></p><h1 id="Subword-level-Embedding"><a href="#Subword-level-Embedding" class="headerlink" title="Subword-level Embedding"></a>Subword-level Embedding</h1><p>最早提出 Subword 这个 embedding 思路的应该是 FAIR 的大佬们的 <a href="https://arxiv.org/pdf/1607.04606v1.pdf" target="_blank" rel="noopener">Enriching Word Vectors with Subword Information</a> 这篇文章。</p><p>Subword 是 Word 和 Char 之间的一个中间层，考虑的是从形态学的角度来对词的含义进行表征。这里考虑到了几个 word embedding 方法的不足，比如：</p><ol><li>在训练词向量的时候，如果某个 word 出现的次数比较少的话，那么它的更新次数也会较少，这样就很难学到这个 word 的高质量的向量表示。</li><li>有些词过于稀有，没有在预训练词向量的语料中出现，这样就会导致预测结果无法得到这个词。这里以人名举个例子，假设我们在做阅读理解，”His name is Mikolov, …, __ is a NLP expert. “ 我们一整段话都说对 Mikolov 大神的描述，最后留个空格要填入 Mikolov，然而由于这个姓氏太过于稀有，没有在训练语料中出现，所以模型无论如何也得不到正确答案。</li><li>单词的构成可能会包含一些前缀和后缀的信息 (e.g. pre-, sub-, -un, -er, -est)。单词的构成也可能是由不同的成分组合而成的 (e.g. bio + informatics)。这些信息在一定程度上也能够表示单词的含义，然而在 word-level 的 embedding 中，这些信息往往会被忽略掉了。</li></ol><p>而 Subword embedding 的提出则能很好地解决上述的问题，在此介绍一下两种比较常见的 subword-level embedding 的方法：</p><p>##N-gram</p><p>顾名思义，就是以一个固定长度的滑动窗口去对单词的子词进行截取[e.g. apple -&gt; (ap, app, ppl, ple, le)]，最后将各个 subword 的向量求和即可得到整个 word 的向量表示。上述提及的 <a href="https://arxiv.org/pdf/1607.04606v1.pdf" target="_blank" rel="noopener">Enriching Word Vectors with Subword Information</a> 用的就是 n-gram 的方法，在训练时候就是用中心词的 n-gram embedding 来预测目标词。</p><p>##BPE</p><p>BPE 算法其实是 94 年 Gage 等人提出的，但是 <a href="https://arxiv.org/abs/1508.07909" target="_blank" rel="noopener">Neural Machine Translation of Rare Words with Subword Unitz</a> 这篇 nmt 文章将其用到了 subword-level 上来。我们可以知道 n-gram 方法虽然能够解决上述的 word-level embedding 的问题，但是它由于是滑动窗口采样的，会导致存在大量冗余信息，也会导致词表大小增大导致算法运行效率变慢。那么如果我们可以对常用词采用 word-level 向量的表示，稀有词再用 subword-level 向量的表示，则可以很好地解决上述问题，因此作者提出用 subword-level 的 BPE 算法来解决这个问题。</p><p>BPE 算法的思想其实就是，首先将各个单字符初始化为 token，再统计一下两两相邻 token 的出现次数，将次数最大的 token pair 给合并起来成为新的 token，放回继续统计和合并，最终得到非重叠的 subword。</p><p>经过这种组合方式后，常见词最终会由 char 回归到 word 级别，而稀有词则会在 subword 层面上就停止了合并，也就达到了我们的目的。比如 unoffical 就是一个稀有词，而 un 和 offical 则会在语料中大量出现，因而通过 BPE 这种方法，我们最终可以将 unoffical 拆成 un + offical 的组合，进而得到高质量的词向量表示。</p><h1 id="Char-level-Embedding"><a href="#Char-level-Embedding" class="headerlink" title="Char-level Embedding"></a>Char-level Embedding</h1><p>前面介绍了那么多 -level 的 embedding 方法，最终人们发现，其实最初的 char-level 的词向量也足以很好地完成很多任务了。除此之外，char-level embedding 还可以当做 word-level embedding 的补充来配合使用。</p><p>常见的 char-level embedding 只是由 CNN / RNN / RNN-LM 构成。而 <a href="https://arxiv.org/pdf/1508.06615.pdf" target="_blank" rel="noopener">Character-Aware Neural Language Models</a> 则提出了 CNN + <a href="https://arxiv.org/pdf/1507.06228.pdf" target="_blank" rel="noopener">Highway</a> 的框架，能够很好地捕获 char-level 的信息。因为之前组会上 张开明 刚讲过这个模型在推荐系统上面的应用，所以就不继续讲这个模型了，模型图如下所示：</p><p><img src="/picture/embedding/1532355203743.jpg" alt="1532355203743"></p><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>也算把各个层面的 embedding 方法总结了一下了，其实我还看了几年前的几篇关于  embedding 的文章，分别是李嫣然女神的 <a href="http://yanran.li/peppypapers/2015/08/17/post-word-embedding.html" target="_blank" rel="noopener">“后 Word Embedding ”的热点会在哪里？</a> 和 <a href="http://yanran.li/peppypapers/2015/05/23/Adapations-and-Variations-of-Word2Vec.html" target="_blank" rel="noopener">Adapations and Variations of Word2vec</a>，以及 licstar 的 <a href="http://licstar.net/archives/620" target="_blank" rel="noopener">《How to Generate a Good Word Embedding?》导读</a> 和 <a href="http://licstar.net/archives/328" target="_blank" rel="noopener">Deep Learning in NLP （一）词向量和语言模型</a>。</p><p>现在在 18 年回头看 <a href="http://yanran.li/peppypapers/2015/08/17/post-word-embedding.html" target="_blank" rel="noopener">“后 Word Embedding ”的热点会在哪里？</a> 这篇文章，会发现当初李嫣然提及的四个方向都有所验证：</p><ol><li>Interpretable relations : 虽然可解释性上目前做得还不够好，但是从形态学方面去入手的研究以及有很多了，比如上文提及的 subword-level, character-level 的研究。 </li><li>Lexical resources : 虽然训练的词向量可以表示词汇的关系了，但是如果能够再将人工标注的词汇资源加入进去，对于词向量的质量是不是有所提升呢？</li><li>Beyond words : 这个就更好理解了，将 embedding 的范围扩大到 sentence 、 paragraph 甚至 document 的层面上去。</li><li>Beyond English : 英语作为一种通用语言，所能够获取的训练语料真的十分丰富，而接下来的研究就该转向到那些其他语种的 embedding 中去了。</li></ol><p>诚然，时至今日，虽然这一两年还是有 EMLo, InferSent 这些方法的出现，但是 embedding 已经算是一个过气的研究方向了。不过在于生物信息学的方向，对于生物序列 (DNA / RNA / Protein) 的 embedding 工作才刚刚展开，这里涉及到了语料、序列长度、序列切割、无监督分词等一系列的难题，但有理由相信，如果能够加入一些额外的生物信息，在有监督的环境下，还是可能获得一个高质量的序列向量的，届时可能会把目前学界对于生物序列的研究给完全革新一遍，这可能是一项很了不起的贡献。</p><p> [虽然我做了那么久的无监督序列分词，至今也没有取得什么好结果，但也只能继续安利师弟师妹们继续踩进这个坑里了，毕竟改变世界的梦想还是要有的。:-)</p><p>另外由于本人水平有限，这也是我第一次做如此大规模的总结，如果有写错的地方，希望各位大佬们不吝指教。]</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://mp.weixin.qq.com/s/df-k5kJcJXhSWbFMu2mtCA" target="_blank" rel="noopener">深度 | 当前最好的词句嵌入技术概览：从无监督学习转向监督、多任务学习</a></li><li><a href="https://arxiv.org/abs/1802.05365" target="_blank" rel="noopener">ELMo</a></li><li><a href="https://zhuanlan.zhihu.com/p/38254332" target="_blank" rel="noopener">ELMo 最好用的词向量《Deep Contextualized Word Representations》</a></li><li><a href="https://arxiv.org/abs/1405.4053" target="_blank" rel="noopener">PV-DM &amp; PV-DBOW</a></li><li><a href="https://arxiv.org/abs/1506.06726" target="_blank" rel="noopener">Skip-thought vectors</a></li><li><a href="https://openreview.net/forum?id=rJvJXZb0W" target="_blank" rel="noopener">Quick-thoughts vectors</a></li><li><a href="https://arxiv.org/abs/1705.02364" target="_blank" rel="noopener">InferSent</a></li><li><a href="https://link.zhihu.com/?target=http%3A//120.52.73.80/arxiv.org/pdf/1607.04606v1.pdf" target="_blank" rel="noopener">Enriching Word Vectors with Subword Information</a></li><li><a href="https://arxiv.org/abs/1508.07909" target="_blank" rel="noopener">Neural Machine Translation of Rare Words with Subword Unitz</a></li><li><a href="https://arxiv.org/pdf/1507.06228.pdf" target="_blank" rel="noopener">Highway</a></li><li><a href="http://yanran.li/peppypapers/2015/08/17/post-word-embedding.html" target="_blank" rel="noopener">“后 Word Embedding ”的热点会在哪里？</a>  </li><li><a href="http://yanran.li/peppypapers/2015/05/23/Adapations-and-Variations-of-Word2Vec.html" target="_blank" rel="noopener">Adapations and Variations of Word2vec</a> </li><li><a href="http://licstar.net/archives/620" target="_blank" rel="noopener">《How to Generate a Good Word Embedding?》导读</a> </li><li><a href="http://licstar.net/archives/328" target="_blank" rel="noopener">Deep Learning in NLP （一）词向量和语言模型</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Review </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> NLP </tag>
            
            <tag> Word Embedding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 6 Dependency Parsing</title>
      <link href="/2018/06/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-6-Dependency-Parsing/"/>
      <url>/2018/06/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-6-Dependency-Parsing/</url>
      <content type="html"><![CDATA[<p>整理中，待上传…</p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Research Highlight3 Bag of Tricks for Efficient Text Classification</title>
      <link href="/2018/05/09/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight3%20Bag%20of%20Tricks%20for%20Efficient%20Text%20Classification/"/>
      <url>/2018/05/09/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight3%20Bag%20of%20Tricks%20for%20Efficient%20Text%20Classification/</url>
      <content type="html"><![CDATA[<p>本文是 FAIR 在 ACL17 上面的一篇文章。目的是为了解决 NLP 中常见的文本分类问题，并且能够产生词向量作为副产物。</p><a id="more"></a><p>本文提出了大名鼎鼎的 <a href="https://github.com/facebookresearch/fastText" target="_blank" rel="noopener">fastText</a> 工具，训练速度很快，而且效果可以跟深度神经网络相当。</p><p>本文的作者是 Mikolov，即也是 Word2Vec 的作者，这篇文章在模型架构上跟 Word2Vec 很相似，因为之前已经有详细写过 <a href="https://hsiaoyetgun.github.io/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-2-Word-Vector-Representations-word2vec/">Word2Vec</a> ，在此就简单说一下他们的区别。</p><h1 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h1><p>本篇文章的方法部分大概可以分为三块 (虽然按标题看只有两段)：fastText 模型架构、Hierarchical softmax、N-gram features。</p><h2 id="fastText-模型架构"><a href="#fastText-模型架构" class="headerlink" title="fastText 模型架构"></a>fastText 模型架构</h2><p><img src="/picture/cs224n/lec5 rh/006Fmjmcly1fggfg4an8uj30os0d4dgk.jpg" alt="006Fmjmcly1fggfg4an8uj30os0d4dgk"></p><p>fastText 的模型架构部分跟 CBOW 很相似，这里直接说区别：</p><table><thead><tr><th>区别</th><th>CBOW</th><th>fastText</th></tr></thead><tbody><tr><td>输入</td><td>中心词的上下文</td><td>多个单词及 n-gram 特征</td></tr><tr><td>编码方式</td><td>One-hot</td><td>Embedding</td></tr><tr><td>输出</td><td>中心词</td><td>文档类别</td></tr></tbody></table><p>fastText 的核心思想：将整篇文档的词及 n-gram 向量叠加平均得到文档向量，然后用 hierarchical softmax 做分类。</p><h2 id="Hierarchical-softmax"><a href="#Hierarchical-softmax" class="headerlink" title="Hierarchical softmax"></a>Hierarchical softmax</h2><p>其实这块没什么好说的，只是把 CBOW 进行的输出端中心词分类换成了对于文档的分类，依照文档的类别建 huffman 树。<img src="/picture/cs224n/lec5 rh/006Fmjmcly1fggfinvdyxj30ox0eljtw.jpg" alt="006Fmjmcly1fggfinvdyxj30ox0eljtw"></p><h2 id="N-gram-features"><a href="#N-gram-features" class="headerlink" title="N-gram features"></a>N-gram features</h2><p>这块其实是一种很常见的方法，我们知道预训练所得的词向量是固定的，这在于文本分类的任务中，将会丢失一些句子 \ 文档环境中的上下文信息。于是思路就很自然地想到了用 N-gram 的方法来捕获一些上下文信息。</p><p>这里需要提及的是本文中使用的 n-gram 是词级别的，举个例子：</p><p>关于句子 “Bag of Tricks for Efficient Text Classification”，假设 n 取 3，则整个句子就变为 (“Bag of”, “Bag of Tricks”, “of Tricks for”, “Tricks for Efficient”, …)。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="/picture/cs224n/lec5 rh/006Fmjmcly1fggfltgxwcj30pl0dewgh.jpg" alt="006Fmjmcly1fggfltgxwcj30pl0dewgh"></p><p>直接上图，效果不错。fastText 宣扬了一下奥卡姆剃刀的思想，“杀鸡焉用牛刀”。不过得注意一下，fastText 的输入是 embedding 后的词向量，本身就包含了单词的相似度、语义、语法信息，这是其除了 N-gram 外提升精度的另一个原因。</p><p>本文其实并没有太多好讲的地方，不过跟其同阶段提出的 <a href="https://arxiv.org/pdf/1607.04606v1.pdf" target="_blank" rel="noopener">Enriching Word Vectors with Subword Information</a> 很值得学习，这篇文章我在 <a href="https://hsiaoyetgun.github.io/2018/07/09/A-review-on-word-embedding/">A review on word embedding</a> 进行了介绍。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://arxiv.org/pdf/1607.01759v2.pdf" target="_blank" rel="noopener">Bag of Tricks for Efficient Text Classification</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-bag-of-tricks-for-efficient-text-classification.html" target="_blank" rel="noopener">CS224n研究热点3 高效文本分类的锦囊妙计</a></li><li><a href="http://m.neeqm.cn/almosthuman2014/2018-01-26/196146.html" target="_blank" rel="noopener">专栏 | fastText原理及实践</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Word Embedding </tag>
            
            <tag> CS224n </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 5 Backpropagation and Project Advice</title>
      <link href="/2018/05/09/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-5-Backpropagation-and-Project-Advice/"/>
      <url>/2018/05/09/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-5-Backpropagation-and-Project-Advice/</url>
      <content type="html"><![CDATA[<p>印象中几乎所有 ML / DL 课程都会介绍一遍 BP 算法，本门课也绕不过 BP 这座山。这节课主要介绍的是 BP 算法和对课程项目的一些建议，因为前者已经是老生常谈的了，所以只能写写后者了。</p><a id="more"></a><p>本门课程是从 4 个不同的角度来讲解 BP 算法的：</p><h1 id="通用公式"><a href="#通用公式" class="headerlink" title="通用公式"></a>通用公式</h1><p>关于 BP 算法的通用公式推导，我还是继续安利一下<a href="/file/BP.pdf">这篇文章</a>。</p><h1 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h1><p>课程中举了这么一个例子，我们可以将函数 $f(x,y,z) = (x+y)z$ 视为下图的加法器和乘法器电路：</p><p><img src="/picture/cs224n/lec5/1532445094856.jpg" alt="1532445094856"></p><p>为了方便计算，我们把中间过程给表示出来，令 $q = x+y , f = qz$，所以则有 $\frac{\partial q}{\partial x} = 1，\frac{\partial q}{\partial y}=1，\frac{\partial f}{\partial q} = z，\frac{\partial f}{\partial z} = q$。从而问题变为求 $\frac{\partial f}{\partial x}，\frac{\partial f}{\partial y}，\frac{\partial f}{\partial z}$，如下图所示：</p><p><img src="/picture/cs224n/lec5/1532445159668.jpg" alt="1532445159668"></p><p>接着我们从输出到输入一步步地分别反向求导计算，过程如下面图片所示：</p><p><img src="/picture/cs224n/lec5/1532445218797.jpg" alt="1532445218797"></p><p><img src="/picture/cs224n/lec5/1532445350647.jpg" alt="1532445350647"></p><p><img src="/picture/cs224n/lec5/1532445416697.jpg" alt="1532445416697"></p><p><img src="/picture/cs224n/lec5/1532445473185.jpg" alt="1532445473185"></p><p><img src="/picture/cs224n/lec5/1532445535256.jpg" alt="1532445535256"></p><p>这一过程就是我们所说的反向传播的过程了。在反向传播的过程中，我们保留了一个个中间变量，即局部的梯度，这样我们继续反向求导的时候只需用链式法则直接乘以本级的导数即可，节省了大量的重复计算。</p><p><img src="/picture/cs224n/lec5/1532446379028.jpg" alt="1532446379028"></p><p>再放一个复杂点的例子，请自行跟着图片过一遍流程：</p><p><img src="/picture/cs224n/lec5/1.jpg" alt="1"></p><p><img src="/picture/cs224n/lec5/2.jpg" alt="1"></p><p><img src="/picture/cs224n/lec5/3.jpg" alt="1"></p><p><img src="/picture/cs224n/lec5/4.jpg" alt="1"></p><p><img src="/picture/cs224n/lec5/5.jpg" alt="1"></p><p><img src="/picture/cs224n/lec5/6.jpg" alt="1"></p><p>我们注意到电路图的右边其实是一个 sigmoid 门，由于 sigmoid 函数的导数形式很优雅：$\frac{d \sigma(x)}{dx}=\frac{\exp^{-x}}{(1+e^{-x})^2}=(\frac{1+e^{-x}-1}{1+e^{-x}})(\frac{1}{1+e^{-x}})=(1-\sigma(x))\sigma(x)$，因而可以简便地直接将后面几步合并起来带入计算。</p><p><img src="/picture/cs224n/lec5/7.jpg" alt="1"></p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p>流程图的解释方式也是很有意思的，我们可以将网络视为一个有向无环图来理解。</p><p>1条路径：</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fgge2zd5tcj30id0cr75r.jpg" alt="006Fmjmcly1fgge2zd5tcj30id0cr75r"></p><p>2条路径：</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fgge408mygj30m40cw40p.jpg" alt="006Fmjmcly1fgge408mygj30m40cw40p"></p><p>多条路径：<img src="/picture/cs224n/lec5/006Fmjmcly1fgge4ywkerj30l70cmq4j.jpg" alt="006Fmjmcly1fgge4ywkerj30l70cmq4j"></p><p>复杂的流程图：</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fgge5ww9dzj30ox0eijub.jpg" alt="006Fmjmcly1fgge5ww9dzj30ox0eijub"></p><p>哪怕你带有激活函数，也是以一样的方式来进行反向地传递梯度，我们所需要做的就是先找出某个结点的各个父结点，然后再用链式法则并且求和：</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fgge8sex75j30o40e5tbw.jpg" alt="006Fmjmcly1fgge8sex75j30o40e5tbw"></p><p>由这些图可以看出，其实对复杂网络进行反向传播计算还是挺麻烦的，所幸现在有一些软件包可以替我们完成这些计算。</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fgge9mdibhj30og0ee783.jpg" alt="006Fmjmcly1fgge9mdibhj30og0ee783"></p><h1 id="误差信号"><a href="#误差信号" class="headerlink" title="误差信号"></a>误差信号</h1><p>误差信号的传播这块举的是一个两层的神经网络为例：</p><p><img src="/picture/cs224n/lec5/006Fmjmcly1fggeff92m3j30o409a3zs.jpg" alt="006Fmjmcly1fggeff92m3j30o409a3zs"></p><p>假设我们想要得到最初输入的导数，并且 $f=\sigma$ 则误差传播的流程如下所示，首先我们求的是最后一层对 $z^{(3)}$ 的误差 $\delta^{(3)}$：</p><p><img src="/picture/cs224n/lec5/41.jpg" alt="006Fmjmcly1fggekfl67bj30l10at74s"></p><p>结合以下两图可以得知，对于线性层，我们直接做矩阵乘法即可，而对于非线性层，则是做逐元素相乘。我们可以知道 $W^{(2)}$ 的导数为 $\delta^{(3)}a^{(2)T}$。</p><p><img src="/picture/cs224n/lec5/42.jpg" alt="006Fmjmcly1fggenlhz6jj30l509uq3k"></p><p><img src="/picture/cs224n/lec5/43.jpg" alt="006Fmjmcly1fgger4utr0j30lp0bd0tm"></p><p>最终我们将误差信号从输出层传回了输入层，对于 $W^{(1)}$ 的导数为 $\delta^{(2)}a^{(1)T}$。</p><p><img src="/picture/cs224n/lec5/44.jpg" alt="006Fmjmcly1fggetfyqytj30mt0ay3z5"></p><p>在经历 4 轮的轰炸之后，最终 Socher 小哥庆祝了一下大家还存活着。跟着课程过一遍 4 种角度的 BP 算法解读后，应该大家都能够对这个算法有所了解。</p><p>这里真的很想吐槽一下，某 A 厂的面试官，对面抛出了一个“你能解释一下 BP 神经网络和深度神经网络的区别吗？”的高难问题，我真的是一副被你打败了的表情，虽然在电话那头的你并不能看见。(手动微笑)</p><p>#课程项目的建议</p><p>这是对于这门课的 project 的建议，不过我认为还是蛮有道理的，姑且把几条建议给放出来：</p><ol><li>明确你的任务</li><li>明确你的数据集<ol><li>可以直接使用标准数据集</li><li>自己去搜集数据，但要注意别在抓取数据上花费太多时间，这样就本末倒置了</li></ol></li><li>明确你的评估指标</li><li>划分数据集</li><li>建立起一个 baseline<ol><li>先去实现一个最简单的模型，比如 LR。空中楼阁是不靠谱的，我们还是要脚踏实地一步一步地走</li><li>在训练集和开发集上计算评估指标</li><li>分析错误，这个是很重要的一点，先去了解 baseline 的不足之处，后续才能更好地改进模型</li><li>如果效果已经很好的话，那证明这个问题太简单了，没有挑战性，就可以省下一堆时间转做其他课题了</li></ol></li><li>复现一下已有的网络模型<ol><li>同样在训练集合开发集上计算评估指标</li><li>分析输出和错误</li><li>讲已有的模型作为本课程需要实现的最低标准</li><li>[<strong>个人补充：将已有的模型扩展到新的领域上也是一种贡献，其实没必要整天就想着整个新模型出来，搞个大新闻</strong>]</li></ol></li><li>确保一直围绕在数据左右<ol><li>可视化数据集</li><li>搜集总结、统计</li><li>观察错误</li><li>分析不同参数下对性能的影响</li><li>[<strong>个人补充：其实这里最重要的一点就是要确保自己的模型是由数据驱动的，一定要形成”数据驱动”的观念</strong>]</li></ol></li><li>尝试修改模型，这时候可以考虑不同模型的优缺点，自行整合它们来达到目的</li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.youtube.com/watch?v=ERibwqs9p38&amp;t=0s&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6&amp;index=5" target="_blank" rel="noopener">cs224n lecture5</a></li><li><a href="http://web.stanford.edu/class/cs224n/lectures/lecture5.pdf" target="_blank" rel="noopener">cs224n lecture5 slide</a></li><li><a href="/file/BP.pdf">BP算法原理和详细推导流程</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-backpropagation-and-project-advice.html" target="_blank" rel="noopener">CS224n笔记5 反向传播与项目指导</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> CS224n </tag>
            
            <tag> BP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 4 Word Window Classification and Neural Network</title>
      <link href="/2018/05/08/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-4-Word-Window-Classification-and-Neural-Network/"/>
      <url>/2018/05/08/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-4-Word-Window-Classification-and-Neural-Network/</url>
      <content type="html"><![CDATA[<p>这节课 Socher 小哥讲的是根据文本的上下文来进行分类预测的问题。</p><a id="more"></a><h1 id="分类任务"><a href="#分类任务" class="headerlink" title="分类任务"></a>分类任务</h1><p>分类问题是很常见的机器学习任务了，在 NLP 领域，比较常见的分类例子有常见的情感、命名实体、决策等机器学习也常做的分类问题，也有通过上下文来预测其他单词的 (e.g. 阅读理解的填词)，还有直接预测句子的 (e.g. 翻译)。</p><h2 id="直观的分类"><a href="#直观的分类" class="headerlink" title="直观的分类"></a>直观的分类</h2><p>传统机器学习中经常使用的是 LR, SVM 之类的方法来找到分类的决策边界。</p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgerbmxp3bj30dq0dqdgi.jpg" alt="006Fmjmcly1fgerbmxp3bj30dq0dqdgi"></p><h2 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h2><p>这又是个大家常见的老朋友了，softmax 函数为 $p(y_j = 1|x) = \frac{\exp(W_jx)}{\sum_{c=1}^C \exp(W_cx)}$。</p><p>训练时候当然是为了让其概率 $p$ 最大了，所以为了方便计算，我们可以对概率取个负的对数作为其目标函数，其实这个损失函数就等同于交叉熵了。</p><p>$\begin{eqnarray} H(\hat y,y)&amp;=&amp; -\sum_{j=1}^{|V|}y_j\log(\hat y_j) \ &amp;=&amp; -\sum_{j=1}^{C}y_j\log(p(y_j=1|x)) \ &amp;=&amp;-\sum_{j=1}^Cy_j\log(\frac{\exp(W_jx)}{\sum_{c=1}^C \exp(W_cx)}) \end{eqnarray}$</p><p>即 $H(p, q) = -\sum_{c=1}^C p(c)\log q(c)$，交叉熵也可以被重新写成 KL 散度的形式：$H(p,q) = H(p) + D_{KL}(p||q)$。因为 $H(p)$ 在这里是为 0 的 (即使不为 0，那它也是一个固定值，对于优化并没有什么帮助)，所以要最小化这个等式就等同于最小化 KL 散度。</p><p>这里要注意的一点是 KL 散度并非是指距离，而是一种非对称的衡量 $p$ 和 $q$ 之间概率分布差异的标准，其具体公式为 $D_{KL}(p||q) = \sum_{c=1}^C p(c)\log\frac{p(c)}{q(c)}$。</p><p>我们回到之前的 $H(p, q)$ ，因为这里的 $p$ 是 one-hot 的，所以实际上剩下的就只有正类的负对数项了，所以在整个数据集 ${x_i,y_i}^N_{i=1}$ 的目标函数为：$J(\theta) = \frac{1}{N}\sum_{i=1}^N-\log(\frac{e^{f_{y_i}}}{\sum_{c=1}^C e^{f_c)}})$。</p><p>再加上正则项即可得最终的目标函数为：$J(\theta) = \frac{1}{N}\sum_{i=1}^N-\log(\frac{e^{f_{y_i}}}{\sum_{c=1}^C e^{f_c)}}) + \lambda\sum_k \theta_k^2$。</p><h1 id="分类任务中词向量的更新"><a href="#分类任务中词向量的更新" class="headerlink" title="分类任务中词向量的更新"></a>分类任务中词向量的更新</h1><p>在传统的机器学习问题里，模型的参数是由那些权值矩阵 $W$ 的列组成的，一般都不会太大，我们只需要更新它的决策边界：</p><p><img src="/picture/cs224n/lec4/1532417624459.jpg" alt="1532417624459"></p><p>而在深度学习里，情况就截然不同了，我们除了更新决策边界之外，还可以更新我们的词向量 $x$：</p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgf164jxu1j31b00kcwgx.jpg" alt="006Fmjmcly1fgf164jxu1j31b00kcwgx"></p><p>要知道参数一多，模型就容易发生过拟合，课程中举了一个例子。在预训练的词向量里，”TV”, “telly” 和 “television” 这三个词是一块的，但由于情感分类的语料中的训练集只包含 “TV” 和 “telly”，导致 re-training 后这两个词跑到其他地方去了，不再跟其同义词 “television” 一起。<img src="/picture/cs224n/lec4/006Fmjmcly1fgf1biu3l2j30en0en3z7.jpg" alt="006Fmjmcly1fgf1biu3l2j30en0en3z7"></p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgf1db09rhj30db0dadgk.jpg" alt="006Fmjmcly1fgf1db09rhj30db0dadgk"></p><p>那么什么时候应该 re-train 词向量，什么时候又该使之固定不动呢？Socher 小哥给出了一点人生经验：<code>如果训练集较小的时候，就不要再训练词向量，因为这样会破坏其原有结构；如果我们有一个很大的训练集的话，那我们在训练模型中也一并再训练词向量将会取得更好的效果。</code></p><h1 id="窗口分类"><a href="#窗口分类" class="headerlink" title="窗口分类"></a>窗口分类</h1><p>在文本分类的任务中，我们其实是很难对于单个单词来进行分类的，因为语义中会有歧义出现，例如： “to sanction” 的意思可以是 “to permit” 或者 “to punish”；”to seed” 的意思可以是 “to place seeds” 或者 “to remove seeds”。</p><p>而在命名实体中也很容易产生歧义，例如：”Paris” 可以指 “Paris, France”，也可以指 “Paris Hilton”，”Hathaway” 可以指 “Berkshire Hathaway”，也可以指 “Anne Hathaway”。</p><p>那么该如何去消除这些歧义呢？一个很自然而然的想法就是用上这个单词的上下文信息。</p><p>有种做法是将窗口内的词向量来求一个均值 / 加权均值，但是这样会丢失其位置信息。</p><p>还有另外一种做法是将其窗口内的词向量给拼接起来，例如我们取窗口长度为 2，则新的向量的维度为 $X_{window} = x \epsilon \mathit{R}^{5d}$。</p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgf1sbk1f8j317u0820u4.jpg" alt="006Fmjmcly1fgf1sbk1f8j317u0820u4"></p><p>那么如何对这种拼接起来向量进行更新呢？答案是跟原本一样，我们可以将该词向量再拆分开来算，只是我们需要更加小心别算错了。这里需要知晓的是，在更新过程中，计算代价比较高的有两部分：矩阵乘法 $f = Wx$ 和 $\exp$。当然，矩阵乘法的速度还是比循环快很多。</p><p>这种拼接的方法是很有好处的，比如之前的 “Paris” 的例子，假如我们在其窗口内发现了 $X_{in}$ 这个词向量，就知道它代表的是一个地名而非人名了，这样歧义就消失了。 </p><p>softmax (= LR) 的分类效果其实是十分有限的，它只是一种线性的分类器：</p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgf9smlwe0j30o80cdtag.jpg" alt="006Fmjmcly1fgf9smlwe0j30o80cdtag"></p><p>而神经网络则可以提供非线性的决策边界：</p><p><img src="/picture/cs224n/lec4/006Fmjmcly1fgf9u1m2dzj309e09d3zf.jpg" alt="006Fmjmcly1fgf9u1m2dzj309e09d3zf"></p><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>这里课上又讲了一些神经网络的基本知识，包括神经元、激活函数、前向传播、反向传播、链式求导之类的老调调，这里就偷懒不写了 。</p><p>关于 BP 算法，这里有篇<a href="/file/BP.pdf">文章</a>我觉得写得不错。</p><h2 id="间隔最大化目标函数"><a href="#间隔最大化目标函数" class="headerlink" title="间隔最大化目标函数"></a>间隔最大化目标函数</h2><p>最后选择性得写一下目标函数，在设计目标函数的过程中，我们用 $S$ 表示正确分类的得分，$S_c$ 表示误分类的得分。其中 $S = U^Tf(Wx+b), S_c = U^Tf(Wx_c + b)$，我们通过负采样来得到负例。<img src="/picture/cs224n/lec4/1532421041240.jpg" alt="1532421041240"></p><p>一种很朴素的想法是直接最大化 $(S - S_c)$，也就是说我们只需要要求 $S$ 的值高于 $S_c$ 就可以了，并不要求两个值的实际大小为多少，我们在计算损失的时候只需简单地计算 $(S_c - S) &gt; 0$ 时候的错误。这种限制下的目标函数为：$J = \max(S_c - S, 0)$。</p><p>这么做的要求实在太低了，我们可以往这里加入一个缓冲区域，令 $J = max(1 - S + S_c, 0)$。</p><p>这种做法可以让我们在训练中更加关注那些难以区分的样本。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.youtube.com/watch?v=ERibwqs9p38&amp;t=0s&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6&amp;index=4" target="_blank" rel="noopener">cs224n lecture4</a></li><li><a href="http://web.stanford.edu/class/cs224n/lectures/lecture4.pdf" target="_blank" rel="noopener">cs224n lecture4 slide</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-word-window-classification-and-neural-networks.html" target="_blank" rel="noopener">CS224n笔记4 Word Window分类与神经网络</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> CS224n </tag>
            
            <tag> Ambiguity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Research Highlight2 Linear Algebraic Structure of Word Senses, with Applications to Polysemy</title>
      <link href="/2018/05/07/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Research-Highlight2-Linear-Algebraic-Structure-of-Word-Senses-with-Applications-to-Polysemy/"/>
      <url>/2018/05/07/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Research-Highlight2-Linear-Algebraic-Structure-of-Word-Senses-with-Applications-to-Polysemy/</url>
      <content type="html"><![CDATA[<p>这是一篇最终收录在 TACL2018 上面的文章，讲的是词向量中一词多义的问题。</p><a id="more"></a><h1 id="如何表示一词多义"><a href="#如何表示一词多义" class="headerlink" title="如何表示一词多义"></a>如何表示一词多义</h1><p>我们知道预训练好的词向量是固定的，对于词表中的每个词它都有一个固定的向量表示，我们如果把这些词向量投影到二维空间里去，就可以发现相关的词的欧几里得距离会较小，即他们会聚集在一块。</p><p><img src="/picture/cs224n/lec3 rh/1532423042432.jpg" alt="1532423042432"></p><p>这种固定的词向量表示虽然能够表征出单词的意思，但是也带来了另一个问题，即当一个词有多个意思的时候，那它在向量层面到底是怎么表示的？</p><p><img src="/picture/cs224n/lec3 rh/1532423108176.jpg" alt="1532423108176"></p><p>课上以这个 “tie” 为例，它可以表示足球比赛中的平局，也能够表示服饰范畴内的领带，还能够表示绳子打结。那么如果在投影 “tie” 这个词的时候，它应该落在上图中的哪个位置呢？<img src="/picture/cs224n/lec3 rh/006Fmjmcly1fge1i3od75j30lw0i2q4b.jpg" alt="006Fmjmcly1fge1i3od75j30lw0i2q4b"></p><p>论文里头给出了答案，它的向量实际上是各个意思的平均值，也就是说词向量可以包含了它各个意思的信息。</p><h1 id="如何复原各个意思"><a href="#如何复原各个意思" class="headerlink" title="如何复原各个意思"></a>如何复原各个意思</h1><p>那么这样又带来了一个问题，既然它已经被求平均了，那么我们可以把它的各个意思都给复原出来吗？</p><p>论文指出单词的意思是由下式来进行稀疏编码的：</p><p><img src="/picture/cs224n/lec3 rh/006Fmjmcly1fge1lnccclj317a0f6gom.jpg" alt="006Fmjmcly1fge1lnccclj317a0f6gom"></p><p>其中的上下文向量 $A_i$ 大概包括 2000 个词，而 $\alpha_i$ 则表示特定上下文向量的系数，一般选择 5 个上下文向量来做相加，最后加上一个无关紧要的噪声项。</p><p>论文里头说这些参数可以由标准 k-SVD 算法求出，所以不同的词义就可以通过这种稀疏编码的方式复原回来了，复原结果如下：</p><p><img src="/picture/cs224n/lec3 rh/006Fmjmcly1fge1qydkjjj31fc0ia117.jpg" alt="006Fmjmcly1fge1qydkjjj31fc0ia117"></p><p>最后拉上一帮各国的研究生来“人工标注”，即问他们下图左方的一类词是否同某个词相关，再来同复原的结果做对比。下图右方的结果表明这种方法大概可以达到非土著的区分水平，说明效果还是挺不错的。</p><p><img src="/picture/cs224n/lec3 rh/1532425803386.jpg" alt="1532425803386"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后 TA 作了个总结：</p><ol><li>词向量是可以捕获一词多义的信息的</li><li>词向量是由该词的不同意思的向量做线性叠加而得到的</li><li>一词多义可以通过稀疏编码的方式复原出来</li><li>这种复原方法可以达到 non-native English speaker 的水平。</li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://arxiv.org/abs/1601.03764" target="_blank" rel="noopener">Linear Algebraic Structure of Word Senses, with Applications to Polysemy</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-word-senses.html" target="_blank" rel="noopener">CS224n研究热点2 词语义项的线性代数结构与词义消歧</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> CS224n </tag>
            
            <tag> Polysemy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 3 Advanced Word Vector Representations</title>
      <link href="/2018/05/07/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-3-Advanced-Word-Vector-Representations/"/>
      <url>/2018/05/07/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-3-Advanced-Word-Vector-Representations/</url>
      <content type="html"><![CDATA[<p>这节课一开始先回顾了一下上节课的内容，<a href="https://hsiaoyetgun.github.io/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-2-Word-Vector-Representations-word2vec/">Word2Vec</a>。</p><a id="more"></a><h1 id="Word2Vec-总结"><a href="#Word2Vec-总结" class="headerlink" title="Word2Vec 总结"></a>Word2Vec 总结</h1><p>接着对 Word2Vec 算法作了一个总结：</p><blockquote><ol><li>Word2Vec 遍历了整个语料库中的每一个词。</li><li>Word2Vec 算法的主要思想为通过一个单词的上下文信息中得到这个单词的意思，即通过中心词来预测其上下文信息 (SG) 和通过上下文信息来预测中心词 (CBOW)。</li><li>Word2Vec 捕获的是共现词中是否同时出现的信息。</li></ol></blockquote><p>这里由第 3 点引出了一种新的思路，Word2Vec 算法只是捕捉了两个词是否同时出现的信息，那我们是不是可以直接去捕捉单词间共现次数的信息呢？很显然答案是肯定的，这也就是本节课的内容，GloVe。</p><h1 id="基于共现矩阵的词嵌入模型"><a href="#基于共现矩阵的词嵌入模型" class="headerlink" title="基于共现矩阵的词嵌入模型"></a>基于共现矩阵的词嵌入模型</h1><p>在讲述 GloVe 算法之前，我们先讲一下较为原始的方法。首先我们需要通过大量的语料文本来构建一个共现矩阵 (Co-occurrence Matrix)。矩阵的构建方式有两种：document-based 和 windows based。</p><p>前者一般用于主题模型 (LSA)，由于统计的是全文的信息，所以这种矩阵很难描述单词的语法信息。后者类似于 Word2Vec，需要指定一个统计的窗口大小，只在窗口的范围内统计单词的共现次数，这种方法可以同时捕捉到语法信息 (POS) 和语义信息。</p><p>举个例子，假设语料由三句话组成：</p><blockquote><ol><li>I like deep learning.</li><li>I like NLP.</li><li>I enjoy flying.</li></ol></blockquote><p>那么如果我们把其窗口的大小设为1，并使用对称窗口的方法，则其共现矩阵如下：</p><table><thead><tr><th>counts</th><th>I</th><th>like</th><th>enjoy</th><th>deep</th><th>learning</th><th>NLP</th><th>flying</th><th>.</th></tr></thead><tbody><tr><td>I</td><td>0</td><td>2</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>like</td><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>enjoy</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>deep</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>learning</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>NLP</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>flying</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>.</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>如果直接简单的以共现向量当做单词的词向量的话，虽然不同的词向量之间就不再像 One-hot 一样是正交的了，可以一定程度上用来计算单词间的相似度，但是还是存在许多问题：</p><blockquote><ol><li>随着词表的增加，词向量的维度也得跟着增加。</li><li>维度灾难问题。语料足够大的时候词表也会很长，导致向量长度过大，训练的代价高昂。</li><li>数据稀疏。与 One-hot 类似，共现矩阵中不为 0 的维度数量很少，会使得后续的分类模型鲁棒性下降。</li></ol></blockquote><h1 id="共现矩阵的降维处理"><a href="#共现矩阵的降维处理" class="headerlink" title="共现矩阵的降维处理"></a>共现矩阵的降维处理</h1><p>为了解决以上问题，语言学家们自然而然地想到了将共现矩阵进行降维，进而得到单词的稠密表示 (dense representation)。</p><p>那么如何对共现矩阵进行降维呢？一个很常见的方法就是使用奇异值分解 (SVD)。SVD 的基本思想是，通过将原共现矩阵 X 分解为一个正交矩阵 U，一个对角矩阵 S，和另一个正交矩阵 V 乘积的形式，并提取 U 的 k 个主成分（按 S 里对角元的大小排序）构造低维词向量。具体原理推导可以参考 <a href="http://weibo.com/leftnoteasy" target="_blank" rel="noopener">leftnoteasy的博文</a>。<img src="/picture/cs224n/lec3/006Fmjmcly1fgdwqgw3cbj311w0mmdia.jpg" alt="006Fmjmcly1fgdwqgw3cbj311w0mmdia"></p><p>除此之外，对于共现矩阵 X 的处理也有很多值得一提的 Hacks：</p><blockquote><ol><li>部分的单词 (the, he, has) 出现的次数过多，使得它们对于语法信息的影响过大。改进的方法就是限制高频词的最大频次 (min(X, t), with t~100)，或者干脆直接停用高频词。</li><li>带权重地统计窗口。距离中心词跃进的词对于词义的贡献就越大。</li><li>使用 Pearson 相关系数来替代掉词频，并把负值置 0。</li></ol></blockquote><p>以上的方法虽然简单粗暴，但是还是取得了很不错的结果。</p><p>然而 SVD 算法有几个根本性的问题没法解决：</p><blockquote><ol><li>SVD 是一个计算复杂度高昂 (O($mn^2$)) 的算法，无法在实际环境中使用。</li><li>SVD 方法不方便处理新词或者新的文档，如果加入一些新的语料后，就需要重新再进行 SVD。</li><li>SVD 的画风跟其他的 DL 模型截然不同。</li></ol></blockquote><h1 id="基于共现次数统计的方法-VS-直接进行预测的方法"><a href="#基于共现次数统计的方法-VS-直接进行预测的方法" class="headerlink" title="基于共现次数统计的方法 VS 直接进行预测的方法"></a>基于共现次数统计的方法 VS 直接进行预测的方法</h1><p>讲完了 SVD 这类基于共现次数统计的方法和之前的 Word2Vec 这类直接进行预测的方法，课程中列出了以下这一张两种方法的对比图，两种方法的优势和劣势总结得十分到位。<img src="/picture/cs224n/lec3/cs224n-2017-lecture3.jpg" alt="cs224n-2017-lecture3"></p><p>那么有没有一种方法能够同时结合以上这两种方法的优势呢？这就轮到本课的主题 GloVe 出马了。</p><h1 id="GloVe-Global-Vectors"><a href="#GloVe-Global-Vectors" class="headerlink" title="GloVe (Global Vectors)"></a>GloVe (Global Vectors)</h1><p>为了结合以上两种方法的优势，GloVe 模型既使用了语料库的全局统计特征 (全局共现次数统计)，也使用了局部的上下文特征 (窗口)。因而 GloVe 模型引入了共现概率矩阵 (Co-occurrence Probabilities Matrix)。</p><p>直接上论文中的例子：</p><p><img src="/picture/cs224n/lec3/1025542-20171207171214050-818227397.png" alt="1025542-20171207171214050-818227397"></p><p>该矩阵的第一个元素为 ice 出现时 solid 出现的概率，第二个元素为 ice 出现时 gas 出现的概率，以此类推。由共现概率矩阵的值可以看出，概率比率 ($F(w_i, w_j, \hat w_k) = \frac{p_{i,k}}{p_{j,k}}$) 的取值是有一定规律的。</p><p>规律总结如下：</p><table><thead><tr><th>$F(w_i, w_j, \hat w_k)$</th><th>$w_j, w_k$ 相关</th><th>$w_j, w_k$ 不相关</th></tr></thead><tbody><tr><td>$w_i, w_k$ 相关</td><td>趋近 1</td><td>很大</td></tr><tr><td>$w_i, w_k$ 不相关</td><td>很小</td><td>趋近 1</td></tr></tbody></table><p>也就是说，与原本的概率值相比，概率比例能够更好地表示出两个单词间的相关关系。这是一个很简单但是很有用的规律，<strong>如果我们用词向量 $w_i, w_j, w_k$ 通过某种函数计算 $F(w_i, w_j, \hat w_k)$，能够同样得到这样的规律的话，就意味着我们词向量与共现矩阵具有很好的一致性，也就说明我们的词向量中蕴含了共现矩阵中所蕴含的信息。</strong></p><p>于是接下来就到了原作者神奇的脑洞时间了。</p><p>先上公式：$F(w_i, w_j, \hat w_k) = \frac{p_{i,k}}{p_{j,k}}$</p><p>这里等号的左端为全局统计求得的值，右端的 $w_i, w_j, w_k$ 就是我们要求得的词向量，而函数 F 是未知的，作者确定 F 的过程真是让人瞠目结舌。过程如下所示：</p><ol><li>$\frac{p_{i,k}}{p_{j,k}}$ 这个值考察了 $w_i, w_j, w_k$ 三个词两两之间的相关关系，但是这样很难进行 F 的求解，所以更好的方法是先去考察 $w_i, w_j$ 两个词之间的关系，线性空间中的相似性关系自然想到的是两个向量的差 $(w_i - w_j)$，所以我们可以把 F 的形式转化为 $F(w_i - w_j, w_k) = \frac{p_{i,k}}{p_{j,k}}$。</li><li>$\frac{p_{ik}}{p_{jk}}$ 是一个标量，而 F 是直接作用在 $w_i - w_j$ 和 $w_k$ 这两个向量上的，为了把向量转化为标量，自然地就想到了用内积的方法，所以我们可以把 F 的形式进一步转化为 $F((w_i - w_j)^T w_k) = F(w_i^Tw_k - w_j^Tw_k) = \frac{p_{i,k}}{p_{j,k}}$。</li><li>此时 F 的公式的形式为 $F(w_i^Tw_k - w_j^Tw_k) = \frac{p_{i,k}}{p_{j,k}}$。等号左边为差的形式，右边则是商的形式，要把差和商关联起来，作者又想到了用取指数的形式，即 $\exp(w_i^Tw_k - w_j^Tw_k) = \frac{\exp(w_i^Tw_k)}{\exp(w_j^Tw_k)} = \frac{p_{i,k}}{p_{j,k}}$。</li><li>现在形式就很明朗了，我们只需让 $\exp(w_i^Tw_k) = p_{i,k}, \exp(w_j^Tw_k) = p_{j,k}$ 等式就能够成立。</li><li>那么如何让 $\exp(w_i^Tw_k) = p_{i,k} = \frac{x_{i,k}}{x_i}$ 成立呢？只需让 $w_i^Tw_k = \log\frac{x_{i,k}}{x_i} = \log x_{i,k} - \log x_i$。</li><li>又因为作为向量，i 和 k 的顺序交换后 $w_i^Tw_k$ 和 $w_k^Tw_i$ 应该是相等的，即它们应该是对称的。但上式的右边显然不符合这个条件，所以为了解决这个问题，作者又引入了两个偏置项 $b_i, b_k$，这样模型就变成了 $\log x_{i,k} = w_i^Tw_k + b_i + b_k$，其中 $b_i$ 包含了 $\log x_i$。此外还加入了 $b_k$ 来保证模型的对称性。</li><li>因此，我们就可以得到 GloVe 的目标函数了：$J = \sum_{i,k}(w_i^Tw_k + b_i + b_k - \log x_{i,k})^2$。</li><li>再考虑到出现频率越高的词对权重的影响应该越大这个原则，我们需要在目标函数里加一个频率权重项 $f(x_{i, k})$，所以最终的目标函数为：$J = \sum_{ik}f(x_{i,k})(w_i^Tw_k + b_i + b_k - \log x_{i,k})^2$。</li></ol><p>对于这个频率权重项 $f(x_{i, k})$ 我们需要确保其为非减的，并且类似于之前对 (the, he, has) 这类常见词的处理方式，当词频过高的时候，频率的权重项不应该过大，因而需要将 $f$ 控制在一个合适的范围，所以频率权重函数 $f$ 的公式如下：</p><p><img src="/picture/cs224n/lec3/1531055466854.jpg" alt="1531055466854"></p><p>最终作者经过实验得出当 $x_\max = 100, \alpha = 0.75$ 是一个比较好的选择。</p><p>以上就是 GloVe 算法的完整推导流程，这里可以看到，最终我们得到的是 $w_i, w_k$ 两个权重矩阵，它们都捕捉到了单词的共现信息，在实际使用中，实验证明直接将二者简单的相加，得到的权重矩阵就是效果最好的词向量表示，即 $w_{final} = w_i + w_k$。</p><h1 id="GloVe-优点"><a href="#GloVe-优点" class="headerlink" title="GloVe 优点"></a>GloVe 优点</h1><blockquote><ol><li>训练速度快。</li><li>可以扩展到大规模的语料。</li><li>也适用于小规模语料和小向量。</li></ol></blockquote><p><img src="/picture/cs224n/lec3/glove similarity.jpg" alt="glove similarity"></p><h1 id="如何评估词向量"><a href="#如何评估词向量" class="headerlink" title="如何评估词向量"></a>如何评估词向量</h1><p>评估词向量质量高低的方法分为两种： Intrinsic (内部) 和 extrinsic (外部)。</p><h2 id="Intrinsic"><a href="#Intrinsic" class="headerlink" title="Intrinsic"></a>Intrinsic</h2><p>Intrinsic 评估的方式为专门设计单独的试验，由人工标注词语或句子相似度，与模型结果对比。</p><p>这种方法看似比较合理，并且计算速度也很快，然而却不一定对实际应用有帮助。有时候你花很多时间来调整词向量，使得内部评估方式的得分看起来很高，结果在实际应用上一跑预测结果却下降了。(尴尬又不失礼貌的微笑.jpg)</p><p>对于词向量模型来说，一个常用的 Intrinsic 评估是向量类比 (word vector analogies)，它评估了一组词向量在语义和句法上表现出来的线性关系。</p><p><img src="/picture/cs224n/lec3/006Fmjmcly1fge3ddvzkvj31ay07eabj.jpg" alt="006Fmjmcly1fge3ddvzkvj31ay07eabj"></p><p>以上例而言，我们给定了一组词 $(a, b, c, d)$ 我们要验证的是 $d$ 与向量 $(x_b - x_a + x_c)$ 的余弦距离的值要最接近于 $d$ 这个词本身。</p><h2 id="Extrinsic"><a href="#Extrinsic" class="headerlink" title="Extrinsic"></a>Extrinsic</h2><p>Intrinsic 评估的方式为通过对外部实际应用的效果提升来体现。</p><p>耗时较长，不能排除是否是新的词向量与旧系统的某种契合度产生，需要至少两个subsystems同时证明。这类评测中，往往会用pre-train的向量在外部任务的语料上retrain。</p><p><img src="/picture/cs224n/lec3/006Fmjmcly1fge3jyad41j31fg0nyk4t.jpg" alt="006Fmjmcly1fge3jyad41j31fg0nyk4t"></p><h1 id="词向量训练经验"><a href="#词向量训练经验" class="headerlink" title="词向量训练经验"></a>词向量训练经验</h1><p>直接上结论：</p><ol><li>GloVe 的效果在一些任务上可能会比 Word2Vec 更好，但有些时候二者并没什么区别，由于 Word2Vec 出现得更早，原理也更简单易懂，因而目前为止使用得还是很广泛的。</li><li><strong>语料质量 &gt; 语料数量</strong>。记得有某个 kaggle 的关于 Quora 句子相似度的比赛，我们组使用了个不错的模型，结果被其他组用普通的 LSTM 模型吊打得花枝乱颤，归其原因除了预处理没有做好外，我们使用的是泛用的语料训练得到的词向量，而那组人用的是专门的 Quora 语料。</li><li>向量维度、窗口大小、窗口是否对称对词向量质量也有影响，具体如图。然而这是人类语言中的效果图，<strong>在不同的领域中参数还是需要根据实际情况来调整的</strong>。比如我之前做的 RNA 序列问题，最终最好的结果所取的窗口大小大于图中所示，向量维度反而是小于的。<img src="/picture/cs224n/lec3/006Fmjmcly1fge3yxoldrj31de0f0q77.jpg" alt="006Fmjmcly1fge3yxoldrj31de0f0q77"></li><li>GloVe 相比 Word2Vec 更加稳定。</li><li>维基百科的语料好于新闻的语料。</li><li><strong>在训练集大小较小的时候，在模型的训练过程对词向量进行 retrain 的话，会导致整个向量空间原有的几何结构被破坏，从而使得泛化能力变差，所以当训练集不够充分的时候不要 retrain 词向量。当训练集足够大的时候，retrain 词向量往往可以使预测精度得到提升。</strong></li><li><strong>从<a href="https://jiaxuncai.github.io/" target="_blank" rel="noopener">菜爸爸</a>那里得知的一个 trick，可以同时使用两个 pretrain 的词向量，一组固定，一组随着模型的训练进行 retrain，可以使得精度提高。</strong></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.youtube.com/watch?v=ERibwqs9p38&amp;t=0s&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6&amp;index=3" target="_blank" rel="noopener">cs224n lecture3</a></li><li><a href="http://web.stanford.edu/class/cs224n/lectures/lecture3.pdf" target="_blank" rel="noopener">cs224n lecture3 slide</a></li><li><a href="https://nlp.stanford.edu/pubs/glove.pdf" target="_blank" rel="noopener">GloVe: Global Vectors for Word Representation </a></li><li><a href="http://www.cnblogs.com/LeftNotEasy/archive/2011/01/19/svd-and-applications.html" target="_blank" rel="noopener">强大的矩阵奇异值分解(SVD)及其应用</a></li><li><a href="https://blog.csdn.net/coderTC/article/details/73864097" target="_blank" rel="noopener">理解 GloVe 模型 (Global vectors for word representation)</a></li><li><a href="https://www.cnblogs.com/Weirping/p/7999979.html" target="_blank" rel="noopener">GloVe模型</a></li><li><a href="https://www.cnblogs.com/iloveai/p/cs224d-lecture3-note.html" target="_blank" rel="noopener">(Stanford CS224d) Deep Learning and NLP课程笔记（三）：GloVe与模型的评估</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-advanced-word-vector-representations.html" target="_blank" rel="noopener">CS224n笔记3 高级词向量表示</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Word Embedding </tag>
            
            <tag> CS224n </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Research Highlight1 A simple but tough-to-beat baseline for sentence embedding</title>
      <link href="/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight1%20A%20simple%20but%20tough-to-beat%20baseline%20for%20sentence%20embedding/"/>
      <url>/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20Research%20Highlight1%20A%20simple%20but%20tough-to-beat%20baseline%20for%20sentence%20embedding/</url>
      <content type="html"><![CDATA[<p>cs224n 这门课很有意思的一个地方在于教授会让 TA 在中场休息时候花个 5 分钟左右的时间来讲一下当前的研究亮点。我觉得这点很可取，这么做有助于学生开拓思路、紧跟当下热点，可惜这种做法在国内的大学中是很少能够看见。</p><a id="more"></a><p>这个小讲座讲的是发表在 ICLR17 的一篇文章，<a href="https://openreview.net/pdf?id=SyK00v5xx" target="_blank" rel="noopener">A SIMPLE BUT TOUGH-TO-BEAT BASELINE FOR SEN- TENCE EMBEDDINGS</a>。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>本文是用无监督方法做句子级别的 embedding，用的是一个十分简单但却又很有效的传统方法，这在神经网络泛滥的年代算是一股清流了。</p><p>作者做 word2sen 的动机是想要得到句子的词向量，这样就可以进行句子间的相似度计算了。除此之外，还能在这些句向量的基础上构建分类器来做情感分析的研究。</p><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpbde95dj31cg0s6gpw.jpg" alt="006Fmjmcly1fgcpbde95dj31cg0s6gpw"></p><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpbqtnyjj315w0ty780.jpg" alt="006Fmjmcly1fgcpbqtnyjj315w0ty780"></p><h1 id="已有方法"><a href="#已有方法" class="headerlink" title="已有方法"></a>已有方法</h1><p>稍微介绍一下目前已有的方法。</p><ol><li><p>基于无监督的线性变换的方法。例如简单的对词向量求平均，或者对词向量进行加权平均 (例如以 TF-IDF 为权值)。</p><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpc94vhpj31ck0ecq54.jpg" alt="006Fmjmcly1fgcpc94vhpj31ck0ecq54"></p></li><li><p>基于有监督的神经网络的方法。例如各种满天乱飞的 CNN, RNN (Recurrent), RNN (Recursive) 模型得到的句向量。<img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpcljpmaj319e0i047r.jpg" alt="006Fmjmcly1fgcpcljpmaj319e0i047r"></p></li></ol><h1 id="本文方法"><a href="#本文方法" class="headerlink" title="本文方法"></a>本文方法</h1><p>作者将该算法称为 WR，W 表示 Weighted，根据预设的超参数和词频给每个词向量赋予权重。R 表示 Removal，使用PCA移除句向量中的无关部分。 </p><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpd1w9pwj31840y0ths.jpg" alt="006Fmjmcly1fgcpd1w9pwj31840y0ths"></p><p>算法流程分为两步：</p><ol><li>W 步：对于句子中的每个词向量乘以一个独特的权值，即 $\frac{a}{a+p(w)}$，其中 $a$ 为一个常数 (论文中建议 $a$ 的范围： [$1e−4,1e−3$] )， $p(w)$ 为该词的频率。</li><li>R 步：计算语料库所有句向量构成的矩阵的第一个主成分 $u$，让每个句向量减去它在 $u$ 上的投影 (类似 PCA)。其中，一个向量 $v$ 在另一个向量 $u$ 上的投影定义为：$Proj_uv = \frac{uu^Tv}{||u||^2}$。</li></ol><h1 id="概率论解释"><a href="#概率论解释" class="headerlink" title="概率论解释"></a>概率论解释</h1><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcpdhvoozj312o0vm0yf.jpg" alt="006Fmjmcly1fgcpdhvoozj312o0vm0yf"></p><p>其原理是，给定上下文向量，一个词的出现概率由两项决定：作为平滑项的词频，以及上下文。其中第二项的意思是，有一个平滑变动的上下文随机地发射单词。</p><p>这篇文章我没有看过原文，这里其实并不是完全理解，等之后再来填坑。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="/picture/cs224n/lec2 rh/006Fmjmcly1fgcph0xexsj31d00so4im.jpg" alt="006Fmjmcly1fgcph0xexsj31d00so4im"></p><p>取得了一个不错的结果，但是比 LSTM 效果好这种说法不太妥当，这得取决于实际的任务。</p><p>不过无论如何，这种方法运行耗时短，结果又不错，可以当做一个很好的 baseline。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://openreview.net/pdf?id=SyK00v5xx" target="_blank" rel="noopener">A SIMPLE BUT TOUGH-TO-BEAT BASELINE FOR SEN- TENCE EMBEDDINGS</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-sentence-embeddings.html" target="_blank" rel="noopener">CS224n研究热点1 一个简单但很难超越的Sentence Embedding基线方法</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Word Embedding </tag>
            
            <tag> CS224n </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 2 Word Vector Representations word2vec</title>
      <link href="/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-2-Word-Vector-Representations-word2vec/"/>
      <url>/2018/05/06/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-2-Word-Vector-Representations-word2vec/</url>
      <content type="html"><![CDATA[<p>之前的<a href="https://hsiaoyetgun.github.io/2018/05/03/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-1-Introduction-to-NLP-and-Deep-Learning/">第一课</a>里头提及了为什么 NLP 任务比较难，Deep Learning 在 NLP 领域中取得的成果也不如 CV 和 Speech 来得令人惊讶。</p><a id="more"></a><p>对于这个现象，有一种说法是：</p><blockquote><p>语言（词、句子、篇章等）属于人类认知过程中产生的高层认知抽象实体，而语音和图像属于较为底层的原始输入信号，所以后两者更适合做deep learning来学习特征。</p></blockquote><p>这里就涉及了深度学习中输入的问题，也是所有 NLP 任务中都无法绕过的问题，即<strong><code>在计算机里如何表示一个词？</code></strong></p><p>答案显而易见，就是本节课的主题<strong><code>词向量 (Word Vector)</code></strong>。为了方便理解，我补充了一些课程中没有讲到的内容。</p><h1 id="如何表示词的意思"><a href="#如何表示词的意思" class="headerlink" title="如何表示词的意思"></a>如何表示词的意思</h1><p>姑且先看看 Webster 词典中对于 <code>meaning</code> 的定义：</p><blockquote><ol><li>the idea that is represented by a word, phrase, etc.</li><li>the idea that a person wants to express by using words, signs, etc.</li><li>the idea that is expressed in a word of writing, art, etc.</li></ol></blockquote><p>而在语言学中，对于 <code>meaning</code>最常见的解释为：</p><blockquote><p>signifier ⟺ signified (idea or thing) = denotation</p></blockquote><h1 id="在计算机中我们该如何得到可用的词意"><a href="#在计算机中我们该如何得到可用的词意" class="headerlink" title="在计算机中我们该如何得到可用的词意"></a>在计算机中我们该如何得到可用的词意</h1><p>以上的定义由具体到抽象，在 NLP 领域中，主要是针对第一条 <code>word representation</code>进行研究。</p><p>最初 NLP 领域使用的是分类系统来对词的意思进行表示，比如 WordNet。我们可以通过查询单词的<a href="https://en.wikipedia.org/wiki/Hyponymy_and_hypernymy" target="_blank" rel="noopener">上位词</a>以及同义词集来得知这个词的意思。￼</p><p><img src="/picture/cs224n/lec2/1531029768882.jpg" alt="1531029768882"></p><p>比如上图，我们查询 panda 的上位词，可以得到 procyonid (浣熊科)、carnivore (肉食动物) 等词。查询 good 的同义词，可以得到 full、 honorable、 beneficial、ripe 等词。</p><p>这就是一种离散的表示 (Discrete Representation)，然而这种表示方式存在很多的问题：</p><ol><li>词语有着独特的语境。以上面的同义词为例，在查询 good 的时候我们发现， ripe 和 honorable 都为其同义词，但是我们在描述一件事物为 good 的时候，如果使用其同义词 ripe 或者 honorable 来代替的话，很多时候都会显得很别扭。</li><li>语言的变化日新月异，每天都有大量的新词涌现出来，而使用这种表示方式的话，很难及时更新旧词的含义和对新词进行定义。维护一个类似 WordNet 这样的数据库是需要花费大量的人力的，代价非常高昂。并且，使用人力去维护词库的话，必不可免地会存在人的主观性的影响。</li><li>通过这种方式，我们能够得到的只是词的上下位词的信息，以及其同义词集信息，这种信息都只是一个二分类的结果，导致我们很难对于两个词之间的相似度给出一个准确的度量方式。</li></ol><p>在绝大多数的基于规则和基于统计的 NLP 工作中，都将单词视为一种原子符号来进行处理。</p><p>比较常见的做法就是用 one-hot 向量来表示一个词，这是一种 localist representation。</p><h1 id="从-symbolic-representations-到-distributed-representations"><a href="#从-symbolic-representations-到-distributed-representations" class="headerlink" title="从 symbolic representations 到 distributed representations"></a>从 symbolic representations 到 distributed representations</h1><p>One-hot 看着是一种简单粗暴又可行的表示方法，然而在实际使用中，像 one-hot 这种离散的 symbolic representations 是存在一些问题的：</p><ol><li>One-hot 向量是正交的，这种表示方法是无法得到不同单词间的相似度的。<img src="/picture/cs224n/lec2/1531032299799.jpg" alt="1531032299799"></li><li>One-hot 向量存在着数据稀疏的问题。</li><li>因其表示的方式的问题，随着所用词表的扩增，One-hot 向量还会出现维度灾难。(Dimensionality: 20K (speech) – 50K (PTB) – 500K (big vocab) – 13M (Google 1T) </li></ol><p>因而，我们需要去探讨一种新的词向量的编码方式。</p><blockquote><p>You shall know a word by the company it keeps.</p><p>– J. R. Firth 1957: 11 </p></blockquote><p>这里就提出了一种思路，即我们可以<strong>通过一个单词的上下文信息中得到这个单词的意思。</strong></p><p><img src="/picture/cs224n/lec2/1531032696955.jpg" alt="1531032696955"></p><p>这是现代统计自然语言处理最成功的思想之一，事实上这也是 Word2Vec 算法的根基。</p><h1 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>首先我们需要先定义一下预测单词上下文的模型及损失函数：</p><p>$p(context | w_t) = …$</p><p>$J = 1 - p(w_{-t} | w_t)$</p><p>这里的 $w_{-t}$ 表示除了 t 之外的上下文。</p><h2 id="Word2Vec-的主要思想"><a href="#Word2Vec-的主要思想" class="headerlink" title="Word2Vec 的主要思想"></a>Word2Vec 的主要思想</h2><p>Word2Vec 有两种计算模型，两种模型的思路是截然相反的：</p><ol><li>Skip-grams (SG) : 通过中心词来预测其上下文信息</li><li>Continuous Bag of Words (CBOW) : 通过上下文信息来预测中心词</li></ol><p>先上一张课件中 SG 模型的预测图方便大家理解，这里我们就是通过 banking 这个中心词来对其上下文信息进行预测，学习的目的就是要最大化上下文中各词的条件概率。</p><p><img src="/picture/cs224n/lec2/cs224n-2017-lecture2.jpg" alt="cs224n-2017-lecture2"></p><p>这里的上下文的条件概率 $p(w_{-t}|w_t)$ 是由 softmax 得到的：<img src="/picture/cs224n/lec2/006Fmjmcly1fgcnjx5gssj30tu09u47t.jpg" alt="006Fmjmcly1fgcnjx5gssj30tu09u47t"></p><p>然后，目标函数定义为所有位置的预测结果的乘积：<img src="/picture/cs224n/lec2/006Fmjmcly1fgcn8dsnw5j318q08m41y.jpg" alt="006Fmjmcly1fgcn8dsnw5j318q08m41y"></p><p>为了方便计算，加个负对数得到最终的损失函数，这样问题就转化为最小化损失函数了：<img src="/picture/cs224n/lec2/006Fmjmcly1fgcn9ndo8dj316s092jwj.jpg" alt="006Fmjmcly1fgcn9ndo8dj316s092jwj"></p><p>接下来就是上几张大家不知道见过多少遍的经典模型图了，以下分别为 CBOW 模型和 SG 模型：<img src="/picture/cs224n/lec2/6cbb8645gw1f5to6e5d9lj216c0qkwhk.jpg" alt="6cbb8645gw1f5to6e5d9lj216c0qkwhk"></p><h2 id="模型流程"><a href="#模型流程" class="headerlink" title="模型流程"></a>模型流程</h2><p>这里参考知乎上<a href="https://www.zhihu.com/question/44832436/answer/266068967" target="_blank" rel="noopener">crystlajj的回答</a>，并偷懒盗用了不少图，以 CBOW 模型的流程为例：</p><blockquote><ol><li>输入层：上下文单词的 onehot. {假设单词向量空间dim为V，上下文单词个数为C}</li><li>输出层的 label ：中心词的 onehot。</li><li>权重矩阵 W 和 W’：维度分别为 {V*N} 和 {N*V}，并将权重矩阵初始化。<strong>要注意最后得到的输入端的 W 即为单词的词向量表示，词向量的维度为N（每一列表示一个词的词向量）。</strong></li><li>所有上下文单词的 onehot 分别乘以共享的输入权重矩阵 W。</li><li>将每个单词的 onthot 与 W 相乘所得的 {1*N} 维向量相加求平均作为隐层向量。并将得到乘以输出权重矩阵W’，得到一个 {1*V} 维的向量。</li><li>将得到的 {1*V} 维向量经过 softmax 函数处理得到 V-dim 概率分布，概率最大的index所指示的单词为预测出的中心词（target word）。</li><li>与true label的onehot做比较，损失函数越小越好。</li></ol></blockquote><p><img src="/picture/cs224n/lec2/v2-0f439e1bb44c71c8e694cc65cb509263_hd.jpg" alt="v2-0f439e1bb44c71c8e694cc65cb509263_hd"></p><p>再偷几张图举个例子，让大家跟着走一遍CBOW模型的流程：</p><p><img src="/picture/cs224n/lec2/v2-3e75211b3b675f17a232f29fae0982bc_hd.jpg" alt="v2-3e75211b3b675f17a232f29fae0982bc_hd"></p><p><img src="/picture/cs224n/lec2/v2-abd3c7d6bc76c01266e8ddd32acfe31a_hd.jpg" alt="v2-abd3c7d6bc76c01266e8ddd32acfe31a_hd"></p><p><img src="/picture/cs224n/lec2/v2-66655880a87789eaba5dd6f5c5033e94_hd.jpg" alt="v2-66655880a87789eaba5dd6f5c5033e94_hd"></p><p><img src="/picture/cs224n/lec2/v2-5325f4a5d1fbacefd93ccb138b706a69_hd.jpg" alt="v2-5325f4a5d1fbacefd93ccb138b706a69_hd"></p><p><img src="/picture/cs224n/lec2/v2-1713450fa2a0f37c8cbcce4ffef04baa_hd.jpg" alt="v2-1713450fa2a0f37c8cbcce4ffef04baa_hd"></p><p>以上就是CBOW 模型的流程，这里再附上一张课件中给出的 SG 模型的流程，可以对比一下。</p><p><img src="/picture/cs224n/lec2/sg.jpg" alt="sg"></p><p>以上就是 Word2Vec 的两种模型的算法流程。其实这种 distributed representation 的思想其实很早就有了，而真正火起来是在 13 年 Mikolov 大神的两篇文章之后。</p><p>因为这个方法实际上存在着一些问题。比如训练词向量模型时我们输入端和输出端用到的依旧是 onehot 编码，维度灾难问题仍然存在。如果语料足够大的话，onehot 编码的长度就很大，每轮学习需要更新大量的参数，将会导致训练速度慢到难以接受的地步，如果语料不够充足的话，则很难学到高质量的词向量表达。</p><h2 id="Word2Vec-优化"><a href="#Word2Vec-优化" class="headerlink" title="Word2Vec 优化"></a>Word2Vec 优化</h2><p>因而 Mikolov 大神就提出了两种高效的训练方法：</p><ol><li>Hierarchical softmax</li><li>Negative sampling</li></ol><p>这部分是课程里头没有涉及的内容，并且公式太多太繁杂，在这里只做一个大概的介绍（实在是懒得写了 doge），具体的推导和源码解析可以参考 <a href="https://blog.csdn.net/mytestmy/article/details/26969149" target="_blank" rel="noopener">falao_beiliu</a> 和 <a href="http://www.hankcs.com/nlp/word2vec.html" target="_blank" rel="noopener">Hankcs</a> 的文章。</p><h3 id="Hierarchical-softmax"><a href="#Hierarchical-softmax" class="headerlink" title="Hierarchical softmax"></a>Hierarchical softmax</h3><p>以 CBOW 为例，HS 的方法就是在输出层使用一颗 huffman 树来提升训练效率，模型图如下所示：</p><p><img src="/picture/cs224n/lec2/6cbb8645gw1f5wmy4jdnwj214w12a42v.jpg" alt="6cbb8645gw1f5wmy4jdnwj214w12a42v"></p><p>Huffman 树在这里就不科普了，HS 方法中的 huffman 树的每个叶子结点表示一个单词，可以被 01 唯一地编码。每个非叶子结点相当于一个神经元。</p><p>由于 huffman 树的特点可以使得编码长度最短，这里我们将单词以词频来建立huffman 树，就可以使得常用词的路径较短，非常用词的路径较长。HS 方法就可以将原本查找目标词的多分类问题转化为多个二分类问题，在每一个非叶子结点进行 softmax 运算，根据结果选择向左下走或者向右下走，进而直到走到叶子结点，就可以得知预测的目标词是什么。通过这种方法，我们每次更新的只是走过的路径上的参数，而非全部的参数，可以使得效率大幅度提高。</p><p>SG 模型的 CBOW 方法同理，结构示意图如下所示：</p><p><img src="/picture/cs224n/lec2/6cbb8645gw1f5wqzg68u0j214a120wij.jpg" alt="6cbb8645gw1f5wqzg68u0j214a120wij"></p><h3 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h3><p>回想一下之前的算法，我们输出的 label 都是一个词的 one-hot 编码，维度为整个词库的大小，这里的目标词的 index 即为分类任务的正例，其他的词都为负例，也就是说在一个单词数为 N 的词库中，我们的分类任务的正例为 1，负例为 N - 1。正常 N 值会远远大于 1，但是每次更新中，所有的负例的参数权重也会跟着一块更新，在 Mikolov 看来这其实是一个很没有效率的事情，我们大可以把负例减少来提高效率并且对于最后的结果不会产生大的影响。</p><p>因此就提出了 NS 方法，顾名思义，NS 即随机挑选出一些负例。采样的算法思想都应该保证频次越高的样本越容易被采集到，因此，NS 算法基本的思路是对于长度为1的线段，根据词语的词频将其公平地分配给每个词语：</p><p>$len(w) = \frac{cnt(w)^N}{\sum_{u\epsilon D}cnt(u)^N}$</p><p>所以就可以根据词频来分配线段中每个词所占有的长度了。这里 Word2Vec 为了提高效率，用了点小 trick，即将原本线段标上 M 个刻度，这样就不需要浮点数的操作，而是直接使用 0-M 间的整数，经过查表就可以得知该取哪个单词了。</p><p>注意这个 len(w) 的计算有包含一个幂计算 (N)，这实际上是一种平滑的策略，可以增大低频词的值，使之更容易被采样到。</p><hr><p>以上大概就是本节课的内容和扩展，实际上课程里头还包含了一些数学知识的复习和 sgd 算法的推导，觉得过于老生常谈，就不拿出来说了，之后如果有相似的内容也会一样跳过。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.youtube.com/watch?v=ERibwqs9p38&amp;t=0s&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6&amp;index=3" target="_blank" rel="noopener">cs224n lecture2</a></li><li><a href="http://web.stanford.edu/class/cs224n/lectures/lecture2.pdf" target="_blank" rel="noopener">cs224n lecture2 slides</a></li><li><a href="http://www.hankcs.com/nlp/word-vector-representations-word2vec.html" target="_blank" rel="noopener">cs224n笔记2 词的向量表示</a></li><li><a href="http://www.hankcs.com/nlp/word2vec.html" target="_blank" rel="noopener">word2vec原理推导与代码分析</a></li><li><a href="https://blog.csdn.net/mytestmy/article/details/26969149" target="_blank" rel="noopener">深度学习word2vec笔记之算法篇</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Word Embedding </tag>
            
            <tag> CS224n </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CS224n学习笔记 Lecture 1 Introduction to NLP and Deep Learning</title>
      <link href="/2018/05/03/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-1-Introduction-to-NLP-and-Deep-Learning/"/>
      <url>/2018/05/03/CS224n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lecture-1-Introduction-to-NLP-and-Deep-Learning/</url>
      <content type="html"><![CDATA[<p>开的一个新坑，想记录一下自己学习 CS224n 的经历，希望可以坚持到最后。</p><a id="more"></a><p>CS224n 是 NLP 领域很出名的一门课程，由 NLP 领域宗师级的人物 Christopher Manning 和 Richard Socher 共同授课。这门课程讲授的是 DL 下的 NLP 知识及应用，并在课间也介绍了目前各个 NLP 领域的前沿亮点研究，这种将理论基础与当下研究亮点相结合的模式我认为很适合让国内高校借鉴。跟大部分的课程一样，第一节课的内容还是比较轻松的，主要讲讲 NLP 的概念和研究范畴，以及当前的进展。</p><h1 id="什么是-NLP？"><a href="#什么是-NLP？" class="headerlink" title="什么是 NLP？"></a>什么是 NLP？</h1><p>课程首先给出了对于 NLP 的定义，即 NLP 是一门包含计算机科学、人工智能以及语言学的交叉学科。</p><p>NLP 的目标则是想让计算机去处理或者说是“理解”自然语言以完成有意义的任务。但是必须明确的是，以目前的研究进展来看，想要完全理解并表示出语言的意思是一个十分困难的目标，完美的语言理解就可以同强 AI 画上等号了。</p><p>以某交赵某老师的说法就是 ”NLP 是 AI 领域里的高级任务，如果有什么新的方法，先拿去其他领域那边做个试验，假如行得通的话，再来试试这边高级的任务效果如何。“</p><p>其实也很好理解，自然语言本身就是人类文明的一种抽象表达，是基于人类认知而产生的高层认知抽象实体，相较于 CV 和 Speech 那种底层的原始输入信号而言，更加难以处理。</p><h2 id="NLP-的层次"><a href="#NLP-的层次" class="headerlink" title="NLP 的层次"></a>NLP 的层次</h2><p><img src="/picture/cs224n/lec1/006Fmjmcly1fgbheqpdgcj31as0qs0zn.jpg" alt="006Fmjmcly1fgbheqpdgcj31as0qs0zn"></p><p>上述这张很好地介绍了 NLP 领域的几个大方向，最顶层即为 NLP 的两个输入来源， speech 和 text，因而需要专门的语音分析或者 OCR 等工具。</p><p>接着就是对输入进行形态学的分析。这里有必要列一下形态学的概念：</p><blockquote><p>形态学（morphology）：形态学（又称“词汇形态学”或“词法”）是语言学的一个分支，研究词的内部结构，包括屈折变化和构词法两个部分。由于词具有语音特征、句法特征和语义特征，形态学处于音位学、句法学和语义学的结合部位，所以形态学是每个语言学家都要关注的一门学科［Matthews,2000］。</p></blockquote><p>紧接着就是本门课的重头戏，句法分析和语义分析。</p><p>最后则是话语级别层面上的分析了，这里就需要更好地理解全文信息和上下文信息，NLU 也是目前 NLP 领域炙手可热的一个方向。</p><h2 id="NLP-的应用"><a href="#NLP-的应用" class="headerlink" title="NLP 的应用"></a>NLP 的应用</h2><p>从简单到复杂地来看看 NLP 的应用场景：</p><ol><li>拼写检查、关键词搜索、发现同义词</li><li>信息检索、文本分类</li><li>机器翻译</li><li>对话系统</li><li>复杂的问答系统</li></ol><h2 id="NLP-在工业届已经起飞"><a href="#NLP-在工业届已经起飞" class="headerlink" title="NLP 在工业届已经起飞"></a>NLP 在工业届已经起飞</h2><p>NLP 在工业届的应用范围也很广，包括了：</p><ol><li>搜索</li><li>在线广告投放</li><li>自动 / 辅助翻译</li><li>情感分析</li><li>语音识别</li><li>聊天机器人</li></ol><h2 id="人类语言的特殊之处"><a href="#人类语言的特殊之处" class="headerlink" title="人类语言的特殊之处"></a>人类语言的特殊之处</h2><p>人类语言是为了传递说话者 / 写作者的意思而特别构建的一套系统，这不仅只是一种环境信号而是一种刻意的沟通，并且最神奇的是，它使用的是一种简单到小屁孩都可以快速学会的编码方式。</p><p>人类的语言是一种离散的、具有象征性的、明确的信号系统。</p><p>人类语言可以用声音、手势、图像/文字来编码，及以它们作为载体，但是不同载体所包含的意思却是一样的。</p><p>虽然人类语言是明确的符号系统，但符号传输到大脑的过程是通过连续的声学光学信号，大脑编码似乎是连续的激活值上的模式。另外巨大的词表也导致数据稀疏，不利于机器学习。这构成一种动机，是不是应该用连续的信号而不是离散的符号去处理语言 (这就是后续课程会涉及的连续词向量表示了)。</p><h1 id="什么是深度学习？"><a href="#什么是深度学习？" class="headerlink" title="什么是深度学习？"></a>什么是深度学习？</h1><p>深度学习是机器学习的一个子集。</p><p>大多数机器学习方法之所以能够有效是因为其使用了一些精心挑选的输入特征以及人类手工设计出来的特征。下图就表示了机器学习的尴尬之处，生动诠释了什么叫”人工“智能。</p><p><img src="/picture/cs224n/lec1/006Fmjmcly1fgbjc1j7kuj30xu0v2gp4.jpg" alt="006Fmjmcly1fgbjc1j7kuj30xu0v2gp4"></p><p>而深度学习则被归入到表示学习中去，它试图自动地去学习那些合适的特征或表示方式。这就是我们为什么要研究深度学习的原因了。</p><p>虽然深度学习有很多优势，但它却是在 2010 年后才开始优于其他机器学习的技术的，为什么是到了这个时间呢？原因有以下几个：</p><ol><li>大量的数据集的出现</li><li>多核 CPU / GPU 硬件的支持</li><li>新的模型、算法、思想的出现<ol><li>更好更灵活的中间层表示的学习</li><li>有效的 end-to-end 系统</li><li>利用了上下文信息、任务间迁移信息的有效学习算法</li></ol></li></ol><p>这轮深度学习引发的改革基本上是从 Speech 和 CV 先开始的，最后才波及到难度更大的 NLP 领域。</p><p>以下分别是 Speech 和 CV 领域 DL 的突破性论文。</p><p><img src="/picture/cs224n/lec1/006Fmjmcly1fgbjxsmsspj30l00qmqai.jpg" alt="006Fmjmcly1fgbjxsmsspj30l00qmqai"></p><p>[Context-Dependent Pre-trained Deep Neural Networks for Large Vocabulary Speech Recognition Dahl et al.  (2010) ]</p><p><img src="/picture/cs224n/lec1/006Fmjmcly1fgbk0i7rszj30nm0rykjl.jpg" alt="006Fmjmcly1fgbk0i7rszj30nm0rykjl"></p><p>[ImageNet Classification with Deep Convolutional Neural Networks by Krizhevsky, Sutskever, &amp; Hinton, 2012, U. Toronto. ]</p><h1 id="为什么-NLP-很难？"><a href="#为什么-NLP-很难？" class="headerlink" title="为什么 NLP 很难？"></a>为什么 NLP 很难？</h1><ol><li>使用语言学、实际情景、现实世界、视觉信息来对自然语言进行表示和学习本身的难度就很大了。</li><li>人类语言是含有歧义的。</li><li>人类语言的解读依赖于现实世界、常识以及上下文。</li></ol><p>接下来老爷子讲了几个关于歧义的段子，然而对于非土著的我而言很难 get 到笑点。</p><h1 id="Deep-NLP-Deep-Learning-NLP"><a href="#Deep-NLP-Deep-Learning-NLP" class="headerlink" title="Deep NLP = Deep Learning + NLP"></a>Deep NLP = Deep Learning + NLP</h1><p>将 NLP 的思想与表示学习结合起来，并用深度学习的方法解决 NLP 目标。这种方式在近几年提高了 NLP 领域许多方面的效果：</p><ul><li>层次：语音、词汇、语法、语义</li><li>工具：词性标注、命名实体识别、句法 / 语义分析</li><li>应用：机器翻译、情感分析、对话系统、问答系统</li></ul><p>接下来的最后 15 分钟左右时间则是介绍了一下以上 NLP 各个领域深度学习所带来的改变。</p><ul><li>词向量：离散的 one-hot、共现矩阵 -&gt; 连续分布式向量表示</li><li>形态学：词素 (e.g. prefix, stem, suffix, un, interest, ed) -&gt; 将词素也作为向量 (e.g. subword)</li><li>句法分析 / 语义分析：规则 -&gt; 直接上神经网络 (e.g. RNN, CNN, Tree RNN)</li><li>情感分析：人工搜集词典，在词袋模型上做分类 -&gt; 依旧是神经网络</li><li>问答 / 对话系统：手工编写大量规则，然后做 IR -&gt; 直接使用深度学习框架</li><li>机器翻译：从词语、语法、语义等不同层级的信息入手，期望找到一种通用的 Interlingua 来作为各种语言交互的桥梁 -&gt; emmmm…依旧是安利深度学习。</li></ul><p>至此，本门课算是带领大家了解了一下 DLNLP 最近几年在各个方向的发展，还算可以轻松的水过这节课，但接下来的课程就开始劝退模式了。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.youtube.com/watch?v=ERibwqs9p38&amp;t=0s&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6&amp;index=1" target="_blank" rel="noopener">cs224n lecture1</a></li><li><a href="http://web.stanford.edu/class/cs224n/lectures/lecture1.pdf" target="_blank" rel="noopener">cs224n lecture1 slides</a></li><li><a href="http://www.hankcs.com/nlp/cs224n-introduction-to-nlp-and-deep-learning.html" target="_blank" rel="noopener">CS224n笔记1 自然语言处理与深度学习简介</a></li></ol>]]></content>
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> CS224n </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Intro</title>
      <link href="/2018/02/01/Intro/"/>
      <url>/2018/02/01/Intro/</url>
      <content type="html"><![CDATA[<center><font size="6"><strong>-写作动机-</strong></font></center><hr><p>一直有写博客的想法，却一直都只是想想而已。</p><a id="more"></a><p>总觉得维护博客是一件很花费时间的事情，也担心自己水平不够，没什么好写的。</p><p>今天总算跨出了这一步，花了点时间配置了一下个人博客，也想好了该去写一些什么东西，剩下的就是希望自己能够一直坚持写下去。</p><blockquote><p>阐述一下自己写这个博客的动机吧：</p><ol><li>克服惰性</li><li>巩固学习</li><li>帮助自己和他人</li><li>提高写作、表达水平</li><li>记录经历</li></ol></blockquote><p>希望几年后回首时，能够感谢自己现在迈出的这一步。</p>]]></content>
      
      <categories>
          
          <category> By-Talk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> By-Talk </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
